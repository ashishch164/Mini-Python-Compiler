Terminals unused in grammar

   DIGITS
   SPECIAL
   SPACE
   KEYWORD
   SQUAREBRACKET_START
   SQUAREBRACKET_END
   MOD
   RANGE
   SINGLEQUOTE
   DOUBLEQUOTE
   LIST


Grammar

    0 $accept: P $end

    1 P: S

    2 S: Simple S
    3  | Compound S
    4  | /* empty */

    5 IS: In Simple IS
    6   | In Compound IS
    7   | /* empty */

    8 In: INDENT
    9   | In INDENT

   10 Simple: Assignment LB
   11       | Print LB

   12 Assignment: ID opassgn E1

   13 opassgn: DIVIDEEQUAL
   14        | MULEQUAL
   15        | MINUSEQUAL
   16        | EQUAL
   17        | PLUSEQUAL

   18 E1: E1 OP1 E2
   19   | E2

   20 E2: E2 OP2 E3
   21   | E3

   22 $@1: /* empty */

   23 E3: E4 EXPONENTIAL $@1 E3
   24   | E4

   25 E4: INTEGER
   26   | NUM
   27   | ID
   28   | SPECIAL_START E1 SPECIAL_END

   29 OP1: PLUS
   30    | MINUS

   31 OP2: MUL
   32    | DIVIDE

   33 Compound: if_else LB
   34         | only_if LB
   35         | while_loop LB

   36 only_if: IF condition COLON LB IND

   37 $@2: /* empty */

   38 if_else: IF condition COLON LB IND $@2 else_1

   39 $@3: /* empty */

   40 else_1: ELSE $@3 COLON LB IND

   41 while_loop: WHILE condition COLON LB IND

   42 condition: cond

   43 cond: cond opor cond1
   44     | cond1

   45 cond1: cond1 opand cond2
   46      | cond2

   47 cond2: opnot cond2
   48      | cond3

   49 cond3: SPECIAL_START cond SPECIAL_END
   50      | relexp
   51      | bool

   52 relexp: relexp relop E1
   53       | ID
   54       | NUM
   55       | INTEGER

   56 relop: comparison
   57      | IN
   58      | NOTIN

   59 comparison: LESSTHAN
   60           | LESSTHANEQUAL
   61           | GREATERTHAN
   62           | GREATERTHANEQUAL
   63           | DOUBLEEQUAL
   64           | NOTEQUAL

   65 bool: T
   66     | F

   67 opor: OR

   68 opand: AND

   69 opnot: NOT

   70 IND: IS

   71 Print: PRINT SPECIAL_START toprint SPECIAL_END
   72      | PRINT SPECIAL_START toprint SEP EQUAL STRING END EQUAL STRING SPECIAL_END
   73      | PRINT SPECIAL_START toprint SEP EQUAL STRING SPECIAL_END
   74      | PRINT SPECIAL_START toprint END EQUAL STRING SPECIAL_END

   75 toprint: X
   76        | X COMMA toprint

   77 X: STRING
   78  | ID
   79  | NUM
   80  | INTEGER

   81 LB: NL


Terminals, with rules where they appear

$end (0) 0
error (256)
DIGITS (258)
ID (259) 12 27 53 78
PLUS (260) 29
MINUS (261) 30
MUL (262) 31
DIVIDE (263) 32
NUM (264) 26 54 79
STRING (265) 72 73 74 77
INTEGER (266) 25 55 80
SPECIAL (267)
NL (268) 81
SPACE (269)
KEYWORD (270)
SPECIAL_START (271) 28 49 71 72 73 74
SPECIAL_END (272) 28 49 71 72 73 74
IF (273) 36 38
ELSE (274) 40
WHILE (275) 41
SEP (276) 72 73
END (277) 72 74
OR (278) 67
AND (279) 68
NOT (280) 69
IN (281) 57
NOTIN (282) 58
T (283) 65
F (284) 66
COLON (285) 36 38 40 41
SQUAREBRACKET_START (286)
SQUAREBRACKET_END (287)
MOD (288)
EQUAL (289) 16 72 73 74
PLUSEQUAL (290) 17
PRINT (291) 71 72 73 74
RANGE (292)
SINGLEQUOTE (293)
DOUBLEQUOTE (294)
EXPONENTIAL (295) 23
COMMA (296) 76
INDENT (297) 8 9
LIST (298)
DIVIDEEQUAL (299) 13
MINUSEQUAL (300) 15
MULEQUAL (301) 14
LESSTHAN (302) 59
LESSTHANEQUAL (303) 60
GREATERTHAN (304) 61
GREATERTHANEQUAL (305) 62
DOUBLEEQUAL (306) 63
NOTEQUAL (307) 64


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
P (54)
    on left: 1, on right: 0
S (55)
    on left: 2 3 4, on right: 1 2 3
IS (56)
    on left: 5 6 7, on right: 5 6 70
In (57)
    on left: 8 9, on right: 5 6 9
Simple (58)
    on left: 10 11, on right: 2 5
Assignment (59)
    on left: 12, on right: 10
opassgn (60)
    on left: 13 14 15 16 17, on right: 12
E1 (61)
    on left: 18 19, on right: 12 18 28 52
E2 (62)
    on left: 20 21, on right: 18 19 20
E3 (63)
    on left: 23 24, on right: 20 21 23
$@1 (64)
    on left: 22, on right: 23
E4 (65)
    on left: 25 26 27 28, on right: 23 24
OP1 (66)
    on left: 29 30, on right: 18
OP2 (67)
    on left: 31 32, on right: 20
Compound (68)
    on left: 33 34 35, on right: 3 6
only_if (69)
    on left: 36, on right: 34
if_else (70)
    on left: 38, on right: 33
$@2 (71)
    on left: 37, on right: 38
else_1 (72)
    on left: 40, on right: 38
$@3 (73)
    on left: 39, on right: 40
while_loop (74)
    on left: 41, on right: 35
condition (75)
    on left: 42, on right: 36 38 41
cond (76)
    on left: 43 44, on right: 42 43 49
cond1 (77)
    on left: 45 46, on right: 43 44 45
cond2 (78)
    on left: 47 48, on right: 45 46 47
cond3 (79)
    on left: 49 50 51, on right: 48
relexp (80)
    on left: 52 53 54 55, on right: 50 52
relop (81)
    on left: 56 57 58, on right: 52
comparison (82)
    on left: 59 60 61 62 63 64, on right: 56
bool (83)
    on left: 65 66, on right: 51
opor (84)
    on left: 67, on right: 43
opand (85)
    on left: 68, on right: 45
opnot (86)
    on left: 69, on right: 47
IND (87)
    on left: 70, on right: 36 38 40 41
Print (88)
    on left: 71 72 73 74, on right: 11
toprint (89)
    on left: 75 76, on right: 71 72 73 74 76
X (90)
    on left: 77 78 79 80, on right: 75 76
LB (91)
    on left: 81, on right: 10 11 33 34 35 36 38 40 41


State 0

    0 $accept: . P $end

    ID     shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3
    PRINT  shift, and go to state 4

    $default  reduce using rule 4 (S)

    P           go to state 5
    S           go to state 6
    Simple      go to state 7
    Assignment  go to state 8
    Compound    go to state 9
    only_if     go to state 10
    if_else     go to state 11
    while_loop  go to state 12
    Print       go to state 13


State 1

   12 Assignment: ID . opassgn E1

    EQUAL        shift, and go to state 14
    PLUSEQUAL    shift, and go to state 15
    DIVIDEEQUAL  shift, and go to state 16
    MINUSEQUAL   shift, and go to state 17
    MULEQUAL     shift, and go to state 18

    opassgn  go to state 19


State 2

   36 only_if: IF . condition COLON LB IND
   38 if_else: IF . condition COLON LB IND $@2 else_1

    ID             shift, and go to state 20
    NUM            shift, and go to state 21
    INTEGER        shift, and go to state 22
    SPECIAL_START  shift, and go to state 23
    NOT            shift, and go to state 24
    T              shift, and go to state 25
    F              shift, and go to state 26

    condition  go to state 27
    cond       go to state 28
    cond1      go to state 29
    cond2      go to state 30
    cond3      go to state 31
    relexp     go to state 32
    bool       go to state 33
    opnot      go to state 34


State 3

   41 while_loop: WHILE . condition COLON LB IND

    ID             shift, and go to state 20
    NUM            shift, and go to state 21
    INTEGER        shift, and go to state 22
    SPECIAL_START  shift, and go to state 23
    NOT            shift, and go to state 24
    T              shift, and go to state 25
    F              shift, and go to state 26

    condition  go to state 35
    cond       go to state 28
    cond1      go to state 29
    cond2      go to state 30
    cond3      go to state 31
    relexp     go to state 32
    bool       go to state 33
    opnot      go to state 34


State 4

   71 Print: PRINT . SPECIAL_START toprint SPECIAL_END
   72      | PRINT . SPECIAL_START toprint SEP EQUAL STRING END EQUAL STRING SPECIAL_END
   73      | PRINT . SPECIAL_START toprint SEP EQUAL STRING SPECIAL_END
   74      | PRINT . SPECIAL_START toprint END EQUAL STRING SPECIAL_END

    SPECIAL_START  shift, and go to state 36


State 5

    0 $accept: P . $end

    $end  shift, and go to state 37


State 6

    1 P: S .

    $default  reduce using rule 1 (P)


State 7

    2 S: Simple . S

    ID     shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3
    PRINT  shift, and go to state 4

    $default  reduce using rule 4 (S)

    S           go to state 38
    Simple      go to state 7
    Assignment  go to state 8
    Compound    go to state 9
    only_if     go to state 10
    if_else     go to state 11
    while_loop  go to state 12
    Print       go to state 13


State 8

   10 Simple: Assignment . LB

    NL  shift, and go to state 39

    LB  go to state 40


State 9

    3 S: Compound . S

    ID     shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3
    PRINT  shift, and go to state 4

    $default  reduce using rule 4 (S)

    S           go to state 41
    Simple      go to state 7
    Assignment  go to state 8
    Compound    go to state 9
    only_if     go to state 10
    if_else     go to state 11
    while_loop  go to state 12
    Print       go to state 13


State 10

   34 Compound: only_if . LB

    NL  shift, and go to state 39

    LB  go to state 42


State 11

   33 Compound: if_else . LB

    NL  shift, and go to state 39

    LB  go to state 43


State 12

   35 Compound: while_loop . LB

    NL  shift, and go to state 39

    LB  go to state 44


State 13

   11 Simple: Print . LB

    NL  shift, and go to state 39

    LB  go to state 45


State 14

   16 opassgn: EQUAL .

    $default  reduce using rule 16 (opassgn)


State 15

   17 opassgn: PLUSEQUAL .

    $default  reduce using rule 17 (opassgn)


State 16

   13 opassgn: DIVIDEEQUAL .

    $default  reduce using rule 13 (opassgn)


State 17

   15 opassgn: MINUSEQUAL .

    $default  reduce using rule 15 (opassgn)


State 18

   14 opassgn: MULEQUAL .

    $default  reduce using rule 14 (opassgn)


State 19

   12 Assignment: ID opassgn . E1

    ID             shift, and go to state 46
    NUM            shift, and go to state 47
    INTEGER        shift, and go to state 48
    SPECIAL_START  shift, and go to state 49

    E1  go to state 50
    E2  go to state 51
    E3  go to state 52
    E4  go to state 53


State 20

   53 relexp: ID .

    $default  reduce using rule 53 (relexp)


State 21

   54 relexp: NUM .

    $default  reduce using rule 54 (relexp)


State 22

   55 relexp: INTEGER .

    $default  reduce using rule 55 (relexp)


State 23

   49 cond3: SPECIAL_START . cond SPECIAL_END

    ID             shift, and go to state 20
    NUM            shift, and go to state 21
    INTEGER        shift, and go to state 22
    SPECIAL_START  shift, and go to state 23
    NOT            shift, and go to state 24
    T              shift, and go to state 25
    F              shift, and go to state 26

    cond    go to state 54
    cond1   go to state 29
    cond2   go to state 30
    cond3   go to state 31
    relexp  go to state 32
    bool    go to state 33
    opnot   go to state 34


State 24

   69 opnot: NOT .

    $default  reduce using rule 69 (opnot)


State 25

   65 bool: T .

    $default  reduce using rule 65 (bool)


State 26

   66 bool: F .

    $default  reduce using rule 66 (bool)


State 27

   36 only_if: IF condition . COLON LB IND
   38 if_else: IF condition . COLON LB IND $@2 else_1

    COLON  shift, and go to state 55


State 28

   42 condition: cond .
   43 cond: cond . opor cond1

    OR  shift, and go to state 56

    $default  reduce using rule 42 (condition)

    opor  go to state 57


State 29

   44 cond: cond1 .
   45 cond1: cond1 . opand cond2

    AND  shift, and go to state 58

    $default  reduce using rule 44 (cond)

    opand  go to state 59


State 30

   46 cond1: cond2 .

    $default  reduce using rule 46 (cond1)


State 31

   48 cond2: cond3 .

    $default  reduce using rule 48 (cond2)


State 32

   50 cond3: relexp .
   52 relexp: relexp . relop E1

    IN                shift, and go to state 60
    NOTIN             shift, and go to state 61
    LESSTHAN          shift, and go to state 62
    LESSTHANEQUAL     shift, and go to state 63
    GREATERTHAN       shift, and go to state 64
    GREATERTHANEQUAL  shift, and go to state 65
    DOUBLEEQUAL       shift, and go to state 66
    NOTEQUAL          shift, and go to state 67

    $default  reduce using rule 50 (cond3)

    relop       go to state 68
    comparison  go to state 69


State 33

   51 cond3: bool .

    $default  reduce using rule 51 (cond3)


State 34

   47 cond2: opnot . cond2

    ID             shift, and go to state 20
    NUM            shift, and go to state 21
    INTEGER        shift, and go to state 22
    SPECIAL_START  shift, and go to state 23
    NOT            shift, and go to state 24
    T              shift, and go to state 25
    F              shift, and go to state 26

    cond2   go to state 70
    cond3   go to state 31
    relexp  go to state 32
    bool    go to state 33
    opnot   go to state 34


State 35

   41 while_loop: WHILE condition . COLON LB IND

    COLON  shift, and go to state 71


State 36

   71 Print: PRINT SPECIAL_START . toprint SPECIAL_END
   72      | PRINT SPECIAL_START . toprint SEP EQUAL STRING END EQUAL STRING SPECIAL_END
   73      | PRINT SPECIAL_START . toprint SEP EQUAL STRING SPECIAL_END
   74      | PRINT SPECIAL_START . toprint END EQUAL STRING SPECIAL_END

    ID       shift, and go to state 72
    NUM      shift, and go to state 73
    STRING   shift, and go to state 74
    INTEGER  shift, and go to state 75

    toprint  go to state 76
    X        go to state 77


State 37

    0 $accept: P $end .

    $default  accept


State 38

    2 S: Simple S .

    $default  reduce using rule 2 (S)


State 39

   81 LB: NL .

    $default  reduce using rule 81 (LB)


State 40

   10 Simple: Assignment LB .

    $default  reduce using rule 10 (Simple)


State 41

    3 S: Compound S .

    $default  reduce using rule 3 (S)


State 42

   34 Compound: only_if LB .

    $default  reduce using rule 34 (Compound)


State 43

   33 Compound: if_else LB .

    $default  reduce using rule 33 (Compound)


State 44

   35 Compound: while_loop LB .

    $default  reduce using rule 35 (Compound)


State 45

   11 Simple: Print LB .

    $default  reduce using rule 11 (Simple)


State 46

   27 E4: ID .

    $default  reduce using rule 27 (E4)


State 47

   26 E4: NUM .

    $default  reduce using rule 26 (E4)


State 48

   25 E4: INTEGER .

    $default  reduce using rule 25 (E4)


State 49

   28 E4: SPECIAL_START . E1 SPECIAL_END

    ID             shift, and go to state 46
    NUM            shift, and go to state 47
    INTEGER        shift, and go to state 48
    SPECIAL_START  shift, and go to state 49

    E1  go to state 78
    E2  go to state 51
    E3  go to state 52
    E4  go to state 53


State 50

   12 Assignment: ID opassgn E1 .
   18 E1: E1 . OP1 E2

    PLUS   shift, and go to state 79
    MINUS  shift, and go to state 80

    $default  reduce using rule 12 (Assignment)

    OP1  go to state 81


State 51

   19 E1: E2 .
   20 E2: E2 . OP2 E3

    MUL     shift, and go to state 82
    DIVIDE  shift, and go to state 83

    $default  reduce using rule 19 (E1)

    OP2  go to state 84


State 52

   21 E2: E3 .

    $default  reduce using rule 21 (E2)


State 53

   23 E3: E4 . EXPONENTIAL $@1 E3
   24   | E4 .

    EXPONENTIAL  shift, and go to state 85

    $default  reduce using rule 24 (E3)


State 54

   43 cond: cond . opor cond1
   49 cond3: SPECIAL_START cond . SPECIAL_END

    SPECIAL_END  shift, and go to state 86
    OR           shift, and go to state 56

    opor  go to state 57


State 55

   36 only_if: IF condition COLON . LB IND
   38 if_else: IF condition COLON . LB IND $@2 else_1

    NL  shift, and go to state 39

    LB  go to state 87


State 56

   67 opor: OR .

    $default  reduce using rule 67 (opor)


State 57

   43 cond: cond opor . cond1

    ID             shift, and go to state 20
    NUM            shift, and go to state 21
    INTEGER        shift, and go to state 22
    SPECIAL_START  shift, and go to state 23
    NOT            shift, and go to state 24
    T              shift, and go to state 25
    F              shift, and go to state 26

    cond1   go to state 88
    cond2   go to state 30
    cond3   go to state 31
    relexp  go to state 32
    bool    go to state 33
    opnot   go to state 34


State 58

   68 opand: AND .

    $default  reduce using rule 68 (opand)


State 59

   45 cond1: cond1 opand . cond2

    ID             shift, and go to state 20
    NUM            shift, and go to state 21
    INTEGER        shift, and go to state 22
    SPECIAL_START  shift, and go to state 23
    NOT            shift, and go to state 24
    T              shift, and go to state 25
    F              shift, and go to state 26

    cond2   go to state 89
    cond3   go to state 31
    relexp  go to state 32
    bool    go to state 33
    opnot   go to state 34


State 60

   57 relop: IN .

    $default  reduce using rule 57 (relop)


State 61

   58 relop: NOTIN .

    $default  reduce using rule 58 (relop)


State 62

   59 comparison: LESSTHAN .

    $default  reduce using rule 59 (comparison)


State 63

   60 comparison: LESSTHANEQUAL .

    $default  reduce using rule 60 (comparison)


State 64

   61 comparison: GREATERTHAN .

    $default  reduce using rule 61 (comparison)


State 65

   62 comparison: GREATERTHANEQUAL .

    $default  reduce using rule 62 (comparison)


State 66

   63 comparison: DOUBLEEQUAL .

    $default  reduce using rule 63 (comparison)


State 67

   64 comparison: NOTEQUAL .

    $default  reduce using rule 64 (comparison)


State 68

   52 relexp: relexp relop . E1

    ID             shift, and go to state 46
    NUM            shift, and go to state 47
    INTEGER        shift, and go to state 48
    SPECIAL_START  shift, and go to state 49

    E1  go to state 90
    E2  go to state 51
    E3  go to state 52
    E4  go to state 53


State 69

   56 relop: comparison .

    $default  reduce using rule 56 (relop)


State 70

   47 cond2: opnot cond2 .

    $default  reduce using rule 47 (cond2)


State 71

   41 while_loop: WHILE condition COLON . LB IND

    NL  shift, and go to state 39

    LB  go to state 91


State 72

   78 X: ID .

    $default  reduce using rule 78 (X)


State 73

   79 X: NUM .

    $default  reduce using rule 79 (X)


State 74

   77 X: STRING .

    $default  reduce using rule 77 (X)


State 75

   80 X: INTEGER .

    $default  reduce using rule 80 (X)


State 76

   71 Print: PRINT SPECIAL_START toprint . SPECIAL_END
   72      | PRINT SPECIAL_START toprint . SEP EQUAL STRING END EQUAL STRING SPECIAL_END
   73      | PRINT SPECIAL_START toprint . SEP EQUAL STRING SPECIAL_END
   74      | PRINT SPECIAL_START toprint . END EQUAL STRING SPECIAL_END

    SPECIAL_END  shift, and go to state 92
    SEP          shift, and go to state 93
    END          shift, and go to state 94


State 77

   75 toprint: X .
   76        | X . COMMA toprint

    COMMA  shift, and go to state 95

    $default  reduce using rule 75 (toprint)


State 78

   18 E1: E1 . OP1 E2
   28 E4: SPECIAL_START E1 . SPECIAL_END

    PLUS         shift, and go to state 79
    MINUS        shift, and go to state 80
    SPECIAL_END  shift, and go to state 96

    OP1  go to state 81


State 79

   29 OP1: PLUS .

    $default  reduce using rule 29 (OP1)


State 80

   30 OP1: MINUS .

    $default  reduce using rule 30 (OP1)


State 81

   18 E1: E1 OP1 . E2

    ID             shift, and go to state 46
    NUM            shift, and go to state 47
    INTEGER        shift, and go to state 48
    SPECIAL_START  shift, and go to state 49

    E2  go to state 97
    E3  go to state 52
    E4  go to state 53


State 82

   31 OP2: MUL .

    $default  reduce using rule 31 (OP2)


State 83

   32 OP2: DIVIDE .

    $default  reduce using rule 32 (OP2)


State 84

   20 E2: E2 OP2 . E3

    ID             shift, and go to state 46
    NUM            shift, and go to state 47
    INTEGER        shift, and go to state 48
    SPECIAL_START  shift, and go to state 49

    E3  go to state 98
    E4  go to state 53


State 85

   23 E3: E4 EXPONENTIAL . $@1 E3

    $default  reduce using rule 22 ($@1)

    $@1  go to state 99


State 86

   49 cond3: SPECIAL_START cond SPECIAL_END .

    $default  reduce using rule 49 (cond3)


State 87

   36 only_if: IF condition COLON LB . IND
   38 if_else: IF condition COLON LB . IND $@2 else_1

    INDENT  shift, and go to state 100

    $default  reduce using rule 7 (IS)

    IS   go to state 101
    In   go to state 102
    IND  go to state 103


State 88

   43 cond: cond opor cond1 .
   45 cond1: cond1 . opand cond2

    AND  shift, and go to state 58

    $default  reduce using rule 43 (cond)

    opand  go to state 59


State 89

   45 cond1: cond1 opand cond2 .

    $default  reduce using rule 45 (cond1)


State 90

   18 E1: E1 . OP1 E2
   52 relexp: relexp relop E1 .

    PLUS   shift, and go to state 79
    MINUS  shift, and go to state 80

    $default  reduce using rule 52 (relexp)

    OP1  go to state 81


State 91

   41 while_loop: WHILE condition COLON LB . IND

    INDENT  shift, and go to state 100

    $default  reduce using rule 7 (IS)

    IS   go to state 101
    In   go to state 102
    IND  go to state 104


State 92

   71 Print: PRINT SPECIAL_START toprint SPECIAL_END .

    $default  reduce using rule 71 (Print)


State 93

   72 Print: PRINT SPECIAL_START toprint SEP . EQUAL STRING END EQUAL STRING SPECIAL_END
   73      | PRINT SPECIAL_START toprint SEP . EQUAL STRING SPECIAL_END

    EQUAL  shift, and go to state 105


State 94

   74 Print: PRINT SPECIAL_START toprint END . EQUAL STRING SPECIAL_END

    EQUAL  shift, and go to state 106


State 95

   76 toprint: X COMMA . toprint

    ID       shift, and go to state 72
    NUM      shift, and go to state 73
    STRING   shift, and go to state 74
    INTEGER  shift, and go to state 75

    toprint  go to state 107
    X        go to state 77


State 96

   28 E4: SPECIAL_START E1 SPECIAL_END .

    $default  reduce using rule 28 (E4)


State 97

   18 E1: E1 OP1 E2 .
   20 E2: E2 . OP2 E3

    MUL     shift, and go to state 82
    DIVIDE  shift, and go to state 83

    $default  reduce using rule 18 (E1)

    OP2  go to state 84


State 98

   20 E2: E2 OP2 E3 .

    $default  reduce using rule 20 (E2)


State 99

   23 E3: E4 EXPONENTIAL $@1 . E3

    ID             shift, and go to state 46
    NUM            shift, and go to state 47
    INTEGER        shift, and go to state 48
    SPECIAL_START  shift, and go to state 49

    E3  go to state 108
    E4  go to state 53


State 100

    8 In: INDENT .

    $default  reduce using rule 8 (In)


State 101

   70 IND: IS .

    $default  reduce using rule 70 (IND)


State 102

    5 IS: In . Simple IS
    6   | In . Compound IS
    9 In: In . INDENT

    ID      shift, and go to state 1
    IF      shift, and go to state 2
    WHILE   shift, and go to state 3
    PRINT   shift, and go to state 4
    INDENT  shift, and go to state 109

    Simple      go to state 110
    Assignment  go to state 8
    Compound    go to state 111
    only_if     go to state 10
    if_else     go to state 11
    while_loop  go to state 12
    Print       go to state 13


State 103

   36 only_if: IF condition COLON LB IND .
   38 if_else: IF condition COLON LB IND . $@2 else_1

    ELSE      reduce using rule 37 ($@2)
    $default  reduce using rule 36 (only_if)

    $@2  go to state 112


State 104

   41 while_loop: WHILE condition COLON LB IND .

    $default  reduce using rule 41 (while_loop)


State 105

   72 Print: PRINT SPECIAL_START toprint SEP EQUAL . STRING END EQUAL STRING SPECIAL_END
   73      | PRINT SPECIAL_START toprint SEP EQUAL . STRING SPECIAL_END

    STRING  shift, and go to state 113


State 106

   74 Print: PRINT SPECIAL_START toprint END EQUAL . STRING SPECIAL_END

    STRING  shift, and go to state 114


State 107

   76 toprint: X COMMA toprint .

    $default  reduce using rule 76 (toprint)


State 108

   23 E3: E4 EXPONENTIAL $@1 E3 .

    $default  reduce using rule 23 (E3)


State 109

    9 In: In INDENT .

    $default  reduce using rule 9 (In)


State 110

    5 IS: In Simple . IS

    INDENT  shift, and go to state 100

    $default  reduce using rule 7 (IS)

    IS  go to state 115
    In  go to state 102


State 111

    6 IS: In Compound . IS

    INDENT  shift, and go to state 100

    $default  reduce using rule 7 (IS)

    IS  go to state 116
    In  go to state 102


State 112

   38 if_else: IF condition COLON LB IND $@2 . else_1

    ELSE  shift, and go to state 117

    else_1  go to state 118


State 113

   72 Print: PRINT SPECIAL_START toprint SEP EQUAL STRING . END EQUAL STRING SPECIAL_END
   73      | PRINT SPECIAL_START toprint SEP EQUAL STRING . SPECIAL_END

    SPECIAL_END  shift, and go to state 119
    END          shift, and go to state 120


State 114

   74 Print: PRINT SPECIAL_START toprint END EQUAL STRING . SPECIAL_END

    SPECIAL_END  shift, and go to state 121


State 115

    5 IS: In Simple IS .

    $default  reduce using rule 5 (IS)


State 116

    6 IS: In Compound IS .

    $default  reduce using rule 6 (IS)


State 117

   40 else_1: ELSE . $@3 COLON LB IND

    $default  reduce using rule 39 ($@3)

    $@3  go to state 122


State 118

   38 if_else: IF condition COLON LB IND $@2 else_1 .

    $default  reduce using rule 38 (if_else)


State 119

   73 Print: PRINT SPECIAL_START toprint SEP EQUAL STRING SPECIAL_END .

    $default  reduce using rule 73 (Print)


State 120

   72 Print: PRINT SPECIAL_START toprint SEP EQUAL STRING END . EQUAL STRING SPECIAL_END

    EQUAL  shift, and go to state 123


State 121

   74 Print: PRINT SPECIAL_START toprint END EQUAL STRING SPECIAL_END .

    $default  reduce using rule 74 (Print)


State 122

   40 else_1: ELSE $@3 . COLON LB IND

    COLON  shift, and go to state 124


State 123

   72 Print: PRINT SPECIAL_START toprint SEP EQUAL STRING END EQUAL . STRING SPECIAL_END

    STRING  shift, and go to state 125


State 124

   40 else_1: ELSE $@3 COLON . LB IND

    NL  shift, and go to state 39

    LB  go to state 126


State 125

   72 Print: PRINT SPECIAL_START toprint SEP EQUAL STRING END EQUAL STRING . SPECIAL_END

    SPECIAL_END  shift, and go to state 127


State 126

   40 else_1: ELSE $@3 COLON LB . IND

    INDENT  shift, and go to state 100

    $default  reduce using rule 7 (IS)

    IS   go to state 101
    In   go to state 102
    IND  go to state 128


State 127

   72 Print: PRINT SPECIAL_START toprint SEP EQUAL STRING END EQUAL STRING SPECIAL_END .

    $default  reduce using rule 72 (Print)


State 128

   40 else_1: ELSE $@3 COLON LB IND .

    $default  reduce using rule 40 (else_1)
