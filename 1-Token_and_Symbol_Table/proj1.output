Terminals unused in grammar

   DIGITS
   SPECIAL
   SPACE
   KEYWORD
   MOD
   SINGLEQUOTE
   DOUBLEQUOTE


Grammar

    0 $accept: P $end

    1 P: S

    2 S: Simple S
    3  | Compound S
    4  | comment S
    5  | INDENT Simple S
    6  | /* empty */

    7 Simple: Assignment LB
    8       | Print LB

    9 Assignment: ID opassgn E1
   10           | ID EQUAL E1
   11           | ID PLUSEQUAL E1
   12           | list
   13           | string

   14 opassgn: DIVIDEEQUAL
   15        | MULEQUAL
   16        | MINUSEQUAL

   17 list: ID EQUAL Arr
   18     | ID PLUSEQUAL Arr

   19 Arr: SQUAREBRACKET_START list SQUAREBRACKET_END
   20    | LIST SPECIAL_START Range SPECIAL_END
   21    | SQUAREBRACKET_START list SQUAREBRACKET_END mul
   22    | SQUAREBRACKET_START list SQUAREBRACKET_END add

   23 mul: MUL INTEGER

   24 add: PLUS INTEGER

   25 list: listnum
   26     | liststr

   27 Range: RANGE SPECIAL_START start COMMA stop COMMA step SPECIAL_END
   28      | RANGE SPECIAL_START COMMA COMMA SPECIAL_END

   29 start: NUM
   30      | INTEGER

   31 stop: NUM
   32     | INTEGER

   33 step: NUM
   34     | INTEGER

   35 listnum: NUM COMMA listnum
   36        | INTEGER COMMA listnum
   37        | NUM
   38        | INTEGER

   39 liststr: Str COMMA liststr
   40        | Str

   41 Str: STRING
   42    | STRING mul
   43    | STRING addstr

   44 addstr: PLUS STRING

   45 string: ID EQUAL STRING
   46       | ID PLUSEQUAL STRING

   47 E1: E1 OP1 E2
   48   | E2

   49 E2: E2 OP2 E3
   50   | E3

   51 E3: E4 EXPONENTIAL E3
   52   | E4

   53 E4: NUM
   54   | INTEGER
   55   | ID
   56   | SPECIAL_START E1 SPECIAL_END

   57 OP1: PLUS
   58    | MINUS

   59 OP2: MUL
   60    | DIVIDE

   61 Compound: if_else LB
   62         | only_if LB
   63         | while_loop LB

   64 if_else: IF condition COLON LB IND else_1

   65 only_if: IF condition COLON LB IND

   66 else_1: ELSE COLON LB IND

   67 while_loop: WHILE condition COLON LB IND

   68 condition: cond

   69 cond: cond opor cond1
   70     | cond1

   71 cond1: cond1 opand cond2
   72      | cond2

   73 cond2: opnot cond2
   74      | cond3

   75 cond3: SPECIAL_START cond SPECIAL_END
   76      | relexp
   77      | bool

   78 relexp: relexp relop E1
   79       | ID
   80       | NUM
   81       | INTEGER

   82 relop: comparison
   83      | IN
   84      | NOTIN

   85 comparison: LESSTHAN
   86           | LESSTHANEQUAL
   87           | GREATERTHAN
   88           | GREATERTHANEQUAL
   89           | DOUBLEEQUAL
   90           | NOTEQUAL

   91 bool: T
   92     | F

   93 opor: OR

   94 opand: AND

   95 opnot: NOT

   96 IND: INDENT A S

   97 A: /* empty */

   98 Print: PRINT SPECIAL_START toprint SPECIAL_END
   99      | PRINT SPECIAL_START toprint SEP EQUAL STRING END EQUAL STRING SPECIAL_END
  100      | PRINT SPECIAL_START toprint SEP EQUAL STRING SPECIAL_END
  101      | PRINT SPECIAL_START toprint END EQUAL STRING SPECIAL_END

  102 toprint: X
  103        | X COMMA toprint

  104 X: STRING
  105  | Arr
  106  | ID
  107  | NUM
  108  | INTEGER

  109 comment: COMMENT

  110 LB: NL


Terminals, with rules where they appear

$end (0) 0
error (256)
DIGITS (258)
ID (259) 9 10 11 17 18 45 46 55 79 106
PLUS (260) 24 44 57
MINUS (261) 58
MUL (262) 23 59
DIVIDE (263) 60
NUM (264) 29 31 33 35 37 53 80 107
STRING (265) 41 42 43 44 45 46 99 100 101 104
INTEGER (266) 23 24 30 32 34 36 38 54 81 108
SPECIAL (267)
NL (268) 110
SPACE (269)
KEYWORD (270)
SPECIAL_START (271) 20 27 28 56 75 98 99 100 101
SPECIAL_END (272) 20 27 28 56 75 98 99 100 101
IF (273) 64 65
ELSE (274) 66
WHILE (275) 67
SEP (276) 99 100
END (277) 99 101
OR (278) 93
AND (279) 94
NOT (280) 95
IN (281) 83
NOTIN (282) 84
T (283) 91
F (284) 92
COLON (285) 64 65 66 67
SQUAREBRACKET_START (286) 19 21 22
SQUAREBRACKET_END (287) 19 21 22
MOD (288)
EQUAL (289) 10 17 45 99 100 101
PLUSEQUAL (290) 11 18 46
PRINT (291) 98 99 100 101
COMMENT (292) 109
RANGE (293) 27 28
SINGLEQUOTE (294)
DOUBLEQUOTE (295)
EXPONENTIAL (296) 51
COMMA (297) 27 28 35 36 39 103
INDENT (298) 5 96
LIST (299) 20
DIVIDEEQUAL (300) 14
MINUSEQUAL (301) 16
MULEQUAL (302) 15
LESSTHAN (303) 85
LESSTHANEQUAL (304) 86
GREATERTHAN (305) 87
GREATERTHANEQUAL (306) 88
DOUBLEEQUAL (307) 89
NOTEQUAL (308) 90


Nonterminals, with rules where they appear

$accept (54)
    on left: 0
P (55)
    on left: 1, on right: 0
S (56)
    on left: 2 3 4 5 6, on right: 1 2 3 4 5 96
Simple (57)
    on left: 7 8, on right: 2 5
Assignment (58)
    on left: 9 10 11 12 13, on right: 7
opassgn (59)
    on left: 14 15 16, on right: 9
list (60)
    on left: 17 18 25 26, on right: 12 19 21 22
Arr (61)
    on left: 19 20 21 22, on right: 17 18 105
mul (62)
    on left: 23, on right: 21 42
add (63)
    on left: 24, on right: 22
Range (64)
    on left: 27 28, on right: 20
start (65)
    on left: 29 30, on right: 27
stop (66)
    on left: 31 32, on right: 27
step (67)
    on left: 33 34, on right: 27
listnum (68)
    on left: 35 36 37 38, on right: 25 35 36
liststr (69)
    on left: 39 40, on right: 26 39
Str (70)
    on left: 41 42 43, on right: 39 40
addstr (71)
    on left: 44, on right: 43
string (72)
    on left: 45 46, on right: 13
E1 (73)
    on left: 47 48, on right: 9 10 11 47 56 78
E2 (74)
    on left: 49 50, on right: 47 48 49
E3 (75)
    on left: 51 52, on right: 49 50 51
E4 (76)
    on left: 53 54 55 56, on right: 51 52
OP1 (77)
    on left: 57 58, on right: 47
OP2 (78)
    on left: 59 60, on right: 49
Compound (79)
    on left: 61 62 63, on right: 3
if_else (80)
    on left: 64, on right: 61
only_if (81)
    on left: 65, on right: 62
else_1 (82)
    on left: 66, on right: 64
while_loop (83)
    on left: 67, on right: 63
condition (84)
    on left: 68, on right: 64 65 67
cond (85)
    on left: 69 70, on right: 68 69 75
cond1 (86)
    on left: 71 72, on right: 69 70 71
cond2 (87)
    on left: 73 74, on right: 71 72 73
cond3 (88)
    on left: 75 76 77, on right: 74
relexp (89)
    on left: 78 79 80 81, on right: 76 78
relop (90)
    on left: 82 83 84, on right: 78
comparison (91)
    on left: 85 86 87 88 89 90, on right: 82
bool (92)
    on left: 91 92, on right: 77
opor (93)
    on left: 93, on right: 69
opand (94)
    on left: 94, on right: 71
opnot (95)
    on left: 95, on right: 73
IND (96)
    on left: 96, on right: 64 65 66 67
A (97)
    on left: 97, on right: 96
Print (98)
    on left: 98 99 100 101, on right: 8
toprint (99)
    on left: 102 103, on right: 98 99 100 101 103
X (100)
    on left: 104 105 106 107 108, on right: 102 103
comment (101)
    on left: 109, on right: 4
LB (102)
    on left: 110, on right: 7 8 61 62 63 64 65 66 67


State 0

    0 $accept: . P $end

    ID       shift, and go to state 1
    NUM      shift, and go to state 2
    STRING   shift, and go to state 3
    INTEGER  shift, and go to state 4
    IF       shift, and go to state 5
    WHILE    shift, and go to state 6
    PRINT    shift, and go to state 7
    COMMENT  shift, and go to state 8
    INDENT   shift, and go to state 9

    $default  reduce using rule 6 (S)

    P           go to state 10
    S           go to state 11
    Simple      go to state 12
    Assignment  go to state 13
    list        go to state 14
    listnum     go to state 15
    liststr     go to state 16
    Str         go to state 17
    string      go to state 18
    Compound    go to state 19
    if_else     go to state 20
    only_if     go to state 21
    while_loop  go to state 22
    Print       go to state 23
    comment     go to state 24


State 1

    9 Assignment: ID . opassgn E1
   10           | ID . EQUAL E1
   11           | ID . PLUSEQUAL E1
   17 list: ID . EQUAL Arr
   18     | ID . PLUSEQUAL Arr
   45 string: ID . EQUAL STRING
   46       | ID . PLUSEQUAL STRING

    EQUAL        shift, and go to state 25
    PLUSEQUAL    shift, and go to state 26
    DIVIDEEQUAL  shift, and go to state 27
    MINUSEQUAL   shift, and go to state 28
    MULEQUAL     shift, and go to state 29

    opassgn  go to state 30


State 2

   35 listnum: NUM . COMMA listnum
   37        | NUM .

    COMMA  shift, and go to state 31

    $default  reduce using rule 37 (listnum)


State 3

   41 Str: STRING .
   42    | STRING . mul
   43    | STRING . addstr

    PLUS  shift, and go to state 32
    MUL   shift, and go to state 33

    $default  reduce using rule 41 (Str)

    mul     go to state 34
    addstr  go to state 35


State 4

   36 listnum: INTEGER . COMMA listnum
   38        | INTEGER .

    COMMA  shift, and go to state 36

    $default  reduce using rule 38 (listnum)


State 5

   64 if_else: IF . condition COLON LB IND else_1
   65 only_if: IF . condition COLON LB IND

    ID             shift, and go to state 37
    NUM            shift, and go to state 38
    INTEGER        shift, and go to state 39
    SPECIAL_START  shift, and go to state 40
    NOT            shift, and go to state 41
    T              shift, and go to state 42
    F              shift, and go to state 43

    condition  go to state 44
    cond       go to state 45
    cond1      go to state 46
    cond2      go to state 47
    cond3      go to state 48
    relexp     go to state 49
    bool       go to state 50
    opnot      go to state 51


State 6

   67 while_loop: WHILE . condition COLON LB IND

    ID             shift, and go to state 37
    NUM            shift, and go to state 38
    INTEGER        shift, and go to state 39
    SPECIAL_START  shift, and go to state 40
    NOT            shift, and go to state 41
    T              shift, and go to state 42
    F              shift, and go to state 43

    condition  go to state 52
    cond       go to state 45
    cond1      go to state 46
    cond2      go to state 47
    cond3      go to state 48
    relexp     go to state 49
    bool       go to state 50
    opnot      go to state 51


State 7

   98 Print: PRINT . SPECIAL_START toprint SPECIAL_END
   99      | PRINT . SPECIAL_START toprint SEP EQUAL STRING END EQUAL STRING SPECIAL_END
  100      | PRINT . SPECIAL_START toprint SEP EQUAL STRING SPECIAL_END
  101      | PRINT . SPECIAL_START toprint END EQUAL STRING SPECIAL_END

    SPECIAL_START  shift, and go to state 53


State 8

  109 comment: COMMENT .

    $default  reduce using rule 109 (comment)


State 9

    5 S: INDENT . Simple S

    ID       shift, and go to state 1
    NUM      shift, and go to state 2
    STRING   shift, and go to state 3
    INTEGER  shift, and go to state 4
    PRINT    shift, and go to state 7

    Simple      go to state 54
    Assignment  go to state 13
    list        go to state 14
    listnum     go to state 15
    liststr     go to state 16
    Str         go to state 17
    string      go to state 18
    Print       go to state 23


State 10

    0 $accept: P . $end

    $end  shift, and go to state 55


State 11

    1 P: S .

    $default  reduce using rule 1 (P)


State 12

    2 S: Simple . S

    ID       shift, and go to state 1
    NUM      shift, and go to state 2
    STRING   shift, and go to state 3
    INTEGER  shift, and go to state 4
    IF       shift, and go to state 5
    WHILE    shift, and go to state 6
    PRINT    shift, and go to state 7
    COMMENT  shift, and go to state 8
    INDENT   shift, and go to state 9

    $default  reduce using rule 6 (S)

    S           go to state 56
    Simple      go to state 12
    Assignment  go to state 13
    list        go to state 14
    listnum     go to state 15
    liststr     go to state 16
    Str         go to state 17
    string      go to state 18
    Compound    go to state 19
    if_else     go to state 20
    only_if     go to state 21
    while_loop  go to state 22
    Print       go to state 23
    comment     go to state 24


State 13

    7 Simple: Assignment . LB

    NL  shift, and go to state 57

    LB  go to state 58


State 14

   12 Assignment: list .

    $default  reduce using rule 12 (Assignment)


State 15

   25 list: listnum .

    $default  reduce using rule 25 (list)


State 16

   26 list: liststr .

    $default  reduce using rule 26 (list)


State 17

   39 liststr: Str . COMMA liststr
   40        | Str .

    COMMA  shift, and go to state 59

    $default  reduce using rule 40 (liststr)


State 18

   13 Assignment: string .

    $default  reduce using rule 13 (Assignment)


State 19

    3 S: Compound . S

    ID       shift, and go to state 1
    NUM      shift, and go to state 2
    STRING   shift, and go to state 3
    INTEGER  shift, and go to state 4
    IF       shift, and go to state 5
    WHILE    shift, and go to state 6
    PRINT    shift, and go to state 7
    COMMENT  shift, and go to state 8
    INDENT   shift, and go to state 9

    $default  reduce using rule 6 (S)

    S           go to state 60
    Simple      go to state 12
    Assignment  go to state 13
    list        go to state 14
    listnum     go to state 15
    liststr     go to state 16
    Str         go to state 17
    string      go to state 18
    Compound    go to state 19
    if_else     go to state 20
    only_if     go to state 21
    while_loop  go to state 22
    Print       go to state 23
    comment     go to state 24


State 20

   61 Compound: if_else . LB

    NL  shift, and go to state 57

    LB  go to state 61


State 21

   62 Compound: only_if . LB

    NL  shift, and go to state 57

    LB  go to state 62


State 22

   63 Compound: while_loop . LB

    NL  shift, and go to state 57

    LB  go to state 63


State 23

    8 Simple: Print . LB

    NL  shift, and go to state 57

    LB  go to state 64


State 24

    4 S: comment . S

    ID       shift, and go to state 1
    NUM      shift, and go to state 2
    STRING   shift, and go to state 3
    INTEGER  shift, and go to state 4
    IF       shift, and go to state 5
    WHILE    shift, and go to state 6
    PRINT    shift, and go to state 7
    COMMENT  shift, and go to state 8
    INDENT   shift, and go to state 9

    $default  reduce using rule 6 (S)

    S           go to state 65
    Simple      go to state 12
    Assignment  go to state 13
    list        go to state 14
    listnum     go to state 15
    liststr     go to state 16
    Str         go to state 17
    string      go to state 18
    Compound    go to state 19
    if_else     go to state 20
    only_if     go to state 21
    while_loop  go to state 22
    Print       go to state 23
    comment     go to state 24


State 25

   10 Assignment: ID EQUAL . E1
   17 list: ID EQUAL . Arr
   45 string: ID EQUAL . STRING

    ID                   shift, and go to state 66
    NUM                  shift, and go to state 67
    STRING               shift, and go to state 68
    INTEGER              shift, and go to state 69
    SPECIAL_START        shift, and go to state 70
    SQUAREBRACKET_START  shift, and go to state 71
    LIST                 shift, and go to state 72

    Arr  go to state 73
    E1   go to state 74
    E2   go to state 75
    E3   go to state 76
    E4   go to state 77


State 26

   11 Assignment: ID PLUSEQUAL . E1
   18 list: ID PLUSEQUAL . Arr
   46 string: ID PLUSEQUAL . STRING

    ID                   shift, and go to state 66
    NUM                  shift, and go to state 67
    STRING               shift, and go to state 78
    INTEGER              shift, and go to state 69
    SPECIAL_START        shift, and go to state 70
    SQUAREBRACKET_START  shift, and go to state 71
    LIST                 shift, and go to state 72

    Arr  go to state 79
    E1   go to state 80
    E2   go to state 75
    E3   go to state 76
    E4   go to state 77


State 27

   14 opassgn: DIVIDEEQUAL .

    $default  reduce using rule 14 (opassgn)


State 28

   16 opassgn: MINUSEQUAL .

    $default  reduce using rule 16 (opassgn)


State 29

   15 opassgn: MULEQUAL .

    $default  reduce using rule 15 (opassgn)


State 30

    9 Assignment: ID opassgn . E1

    ID             shift, and go to state 66
    NUM            shift, and go to state 67
    INTEGER        shift, and go to state 69
    SPECIAL_START  shift, and go to state 70

    E1  go to state 81
    E2  go to state 75
    E3  go to state 76
    E4  go to state 77


State 31

   35 listnum: NUM COMMA . listnum

    NUM      shift, and go to state 2
    INTEGER  shift, and go to state 4

    listnum  go to state 82


State 32

   44 addstr: PLUS . STRING

    STRING  shift, and go to state 83


State 33

   23 mul: MUL . INTEGER

    INTEGER  shift, and go to state 84


State 34

   42 Str: STRING mul .

    $default  reduce using rule 42 (Str)


State 35

   43 Str: STRING addstr .

    $default  reduce using rule 43 (Str)


State 36

   36 listnum: INTEGER COMMA . listnum

    NUM      shift, and go to state 2
    INTEGER  shift, and go to state 4

    listnum  go to state 85


State 37

   79 relexp: ID .

    $default  reduce using rule 79 (relexp)


State 38

   80 relexp: NUM .

    $default  reduce using rule 80 (relexp)


State 39

   81 relexp: INTEGER .

    $default  reduce using rule 81 (relexp)


State 40

   75 cond3: SPECIAL_START . cond SPECIAL_END

    ID             shift, and go to state 37
    NUM            shift, and go to state 38
    INTEGER        shift, and go to state 39
    SPECIAL_START  shift, and go to state 40
    NOT            shift, and go to state 41
    T              shift, and go to state 42
    F              shift, and go to state 43

    cond    go to state 86
    cond1   go to state 46
    cond2   go to state 47
    cond3   go to state 48
    relexp  go to state 49
    bool    go to state 50
    opnot   go to state 51


State 41

   95 opnot: NOT .

    $default  reduce using rule 95 (opnot)


State 42

   91 bool: T .

    $default  reduce using rule 91 (bool)


State 43

   92 bool: F .

    $default  reduce using rule 92 (bool)


State 44

   64 if_else: IF condition . COLON LB IND else_1
   65 only_if: IF condition . COLON LB IND

    COLON  shift, and go to state 87


State 45

   68 condition: cond .
   69 cond: cond . opor cond1

    OR  shift, and go to state 88

    $default  reduce using rule 68 (condition)

    opor  go to state 89


State 46

   70 cond: cond1 .
   71 cond1: cond1 . opand cond2

    AND  shift, and go to state 90

    $default  reduce using rule 70 (cond)

    opand  go to state 91


State 47

   72 cond1: cond2 .

    $default  reduce using rule 72 (cond1)


State 48

   74 cond2: cond3 .

    $default  reduce using rule 74 (cond2)


State 49

   76 cond3: relexp .
   78 relexp: relexp . relop E1

    IN                shift, and go to state 92
    NOTIN             shift, and go to state 93
    LESSTHAN          shift, and go to state 94
    LESSTHANEQUAL     shift, and go to state 95
    GREATERTHAN       shift, and go to state 96
    GREATERTHANEQUAL  shift, and go to state 97
    DOUBLEEQUAL       shift, and go to state 98
    NOTEQUAL          shift, and go to state 99

    $default  reduce using rule 76 (cond3)

    relop       go to state 100
    comparison  go to state 101


State 50

   77 cond3: bool .

    $default  reduce using rule 77 (cond3)


State 51

   73 cond2: opnot . cond2

    ID             shift, and go to state 37
    NUM            shift, and go to state 38
    INTEGER        shift, and go to state 39
    SPECIAL_START  shift, and go to state 40
    NOT            shift, and go to state 41
    T              shift, and go to state 42
    F              shift, and go to state 43

    cond2   go to state 102
    cond3   go to state 48
    relexp  go to state 49
    bool    go to state 50
    opnot   go to state 51


State 52

   67 while_loop: WHILE condition . COLON LB IND

    COLON  shift, and go to state 103


State 53

   98 Print: PRINT SPECIAL_START . toprint SPECIAL_END
   99      | PRINT SPECIAL_START . toprint SEP EQUAL STRING END EQUAL STRING SPECIAL_END
  100      | PRINT SPECIAL_START . toprint SEP EQUAL STRING SPECIAL_END
  101      | PRINT SPECIAL_START . toprint END EQUAL STRING SPECIAL_END

    ID                   shift, and go to state 104
    NUM                  shift, and go to state 105
    STRING               shift, and go to state 106
    INTEGER              shift, and go to state 107
    SQUAREBRACKET_START  shift, and go to state 71
    LIST                 shift, and go to state 72

    Arr      go to state 108
    toprint  go to state 109
    X        go to state 110


State 54

    5 S: INDENT Simple . S

    ID       shift, and go to state 1
    NUM      shift, and go to state 2
    STRING   shift, and go to state 3
    INTEGER  shift, and go to state 4
    IF       shift, and go to state 5
    WHILE    shift, and go to state 6
    PRINT    shift, and go to state 7
    COMMENT  shift, and go to state 8
    INDENT   shift, and go to state 9

    $default  reduce using rule 6 (S)

    S           go to state 111
    Simple      go to state 12
    Assignment  go to state 13
    list        go to state 14
    listnum     go to state 15
    liststr     go to state 16
    Str         go to state 17
    string      go to state 18
    Compound    go to state 19
    if_else     go to state 20
    only_if     go to state 21
    while_loop  go to state 22
    Print       go to state 23
    comment     go to state 24


State 55

    0 $accept: P $end .

    $default  accept


State 56

    2 S: Simple S .

    $default  reduce using rule 2 (S)


State 57

  110 LB: NL .

    $default  reduce using rule 110 (LB)


State 58

    7 Simple: Assignment LB .

    $default  reduce using rule 7 (Simple)


State 59

   39 liststr: Str COMMA . liststr

    STRING  shift, and go to state 3

    liststr  go to state 112
    Str      go to state 17


State 60

    3 S: Compound S .

    $default  reduce using rule 3 (S)


State 61

   61 Compound: if_else LB .

    $default  reduce using rule 61 (Compound)


State 62

   62 Compound: only_if LB .

    $default  reduce using rule 62 (Compound)


State 63

   63 Compound: while_loop LB .

    $default  reduce using rule 63 (Compound)


State 64

    8 Simple: Print LB .

    $default  reduce using rule 8 (Simple)


State 65

    4 S: comment S .

    $default  reduce using rule 4 (S)


State 66

   55 E4: ID .

    $default  reduce using rule 55 (E4)


State 67

   53 E4: NUM .

    $default  reduce using rule 53 (E4)


State 68

   45 string: ID EQUAL STRING .

    $default  reduce using rule 45 (string)


State 69

   54 E4: INTEGER .

    $default  reduce using rule 54 (E4)


State 70

   56 E4: SPECIAL_START . E1 SPECIAL_END

    ID             shift, and go to state 66
    NUM            shift, and go to state 67
    INTEGER        shift, and go to state 69
    SPECIAL_START  shift, and go to state 70

    E1  go to state 113
    E2  go to state 75
    E3  go to state 76
    E4  go to state 77


State 71

   19 Arr: SQUAREBRACKET_START . list SQUAREBRACKET_END
   21    | SQUAREBRACKET_START . list SQUAREBRACKET_END mul
   22    | SQUAREBRACKET_START . list SQUAREBRACKET_END add

    ID       shift, and go to state 114
    NUM      shift, and go to state 2
    STRING   shift, and go to state 3
    INTEGER  shift, and go to state 4

    list     go to state 115
    listnum  go to state 15
    liststr  go to state 16
    Str      go to state 17


State 72

   20 Arr: LIST . SPECIAL_START Range SPECIAL_END

    SPECIAL_START  shift, and go to state 116


State 73

   17 list: ID EQUAL Arr .

    $default  reduce using rule 17 (list)


State 74

   10 Assignment: ID EQUAL E1 .
   47 E1: E1 . OP1 E2

    PLUS   shift, and go to state 117
    MINUS  shift, and go to state 118

    $default  reduce using rule 10 (Assignment)

    OP1  go to state 119


State 75

   48 E1: E2 .
   49 E2: E2 . OP2 E3

    MUL     shift, and go to state 120
    DIVIDE  shift, and go to state 121

    $default  reduce using rule 48 (E1)

    OP2  go to state 122


State 76

   50 E2: E3 .

    $default  reduce using rule 50 (E2)


State 77

   51 E3: E4 . EXPONENTIAL E3
   52   | E4 .

    EXPONENTIAL  shift, and go to state 123

    $default  reduce using rule 52 (E3)


State 78

   46 string: ID PLUSEQUAL STRING .

    $default  reduce using rule 46 (string)


State 79

   18 list: ID PLUSEQUAL Arr .

    $default  reduce using rule 18 (list)


State 80

   11 Assignment: ID PLUSEQUAL E1 .
   47 E1: E1 . OP1 E2

    PLUS   shift, and go to state 117
    MINUS  shift, and go to state 118

    $default  reduce using rule 11 (Assignment)

    OP1  go to state 119


State 81

    9 Assignment: ID opassgn E1 .
   47 E1: E1 . OP1 E2

    PLUS   shift, and go to state 117
    MINUS  shift, and go to state 118

    $default  reduce using rule 9 (Assignment)

    OP1  go to state 119


State 82

   35 listnum: NUM COMMA listnum .

    $default  reduce using rule 35 (listnum)


State 83

   44 addstr: PLUS STRING .

    $default  reduce using rule 44 (addstr)


State 84

   23 mul: MUL INTEGER .

    $default  reduce using rule 23 (mul)


State 85

   36 listnum: INTEGER COMMA listnum .

    $default  reduce using rule 36 (listnum)


State 86

   69 cond: cond . opor cond1
   75 cond3: SPECIAL_START cond . SPECIAL_END

    SPECIAL_END  shift, and go to state 124
    OR           shift, and go to state 88

    opor  go to state 89


State 87

   64 if_else: IF condition COLON . LB IND else_1
   65 only_if: IF condition COLON . LB IND

    NL  shift, and go to state 57

    LB  go to state 125


State 88

   93 opor: OR .

    $default  reduce using rule 93 (opor)


State 89

   69 cond: cond opor . cond1

    ID             shift, and go to state 37
    NUM            shift, and go to state 38
    INTEGER        shift, and go to state 39
    SPECIAL_START  shift, and go to state 40
    NOT            shift, and go to state 41
    T              shift, and go to state 42
    F              shift, and go to state 43

    cond1   go to state 126
    cond2   go to state 47
    cond3   go to state 48
    relexp  go to state 49
    bool    go to state 50
    opnot   go to state 51


State 90

   94 opand: AND .

    $default  reduce using rule 94 (opand)


State 91

   71 cond1: cond1 opand . cond2

    ID             shift, and go to state 37
    NUM            shift, and go to state 38
    INTEGER        shift, and go to state 39
    SPECIAL_START  shift, and go to state 40
    NOT            shift, and go to state 41
    T              shift, and go to state 42
    F              shift, and go to state 43

    cond2   go to state 127
    cond3   go to state 48
    relexp  go to state 49
    bool    go to state 50
    opnot   go to state 51


State 92

   83 relop: IN .

    $default  reduce using rule 83 (relop)


State 93

   84 relop: NOTIN .

    $default  reduce using rule 84 (relop)


State 94

   85 comparison: LESSTHAN .

    $default  reduce using rule 85 (comparison)


State 95

   86 comparison: LESSTHANEQUAL .

    $default  reduce using rule 86 (comparison)


State 96

   87 comparison: GREATERTHAN .

    $default  reduce using rule 87 (comparison)


State 97

   88 comparison: GREATERTHANEQUAL .

    $default  reduce using rule 88 (comparison)


State 98

   89 comparison: DOUBLEEQUAL .

    $default  reduce using rule 89 (comparison)


State 99

   90 comparison: NOTEQUAL .

    $default  reduce using rule 90 (comparison)


State 100

   78 relexp: relexp relop . E1

    ID             shift, and go to state 66
    NUM            shift, and go to state 67
    INTEGER        shift, and go to state 69
    SPECIAL_START  shift, and go to state 70

    E1  go to state 128
    E2  go to state 75
    E3  go to state 76
    E4  go to state 77


State 101

   82 relop: comparison .

    $default  reduce using rule 82 (relop)


State 102

   73 cond2: opnot cond2 .

    $default  reduce using rule 73 (cond2)


State 103

   67 while_loop: WHILE condition COLON . LB IND

    NL  shift, and go to state 57

    LB  go to state 129


State 104

  106 X: ID .

    $default  reduce using rule 106 (X)


State 105

  107 X: NUM .

    $default  reduce using rule 107 (X)


State 106

  104 X: STRING .

    $default  reduce using rule 104 (X)


State 107

  108 X: INTEGER .

    $default  reduce using rule 108 (X)


State 108

  105 X: Arr .

    $default  reduce using rule 105 (X)


State 109

   98 Print: PRINT SPECIAL_START toprint . SPECIAL_END
   99      | PRINT SPECIAL_START toprint . SEP EQUAL STRING END EQUAL STRING SPECIAL_END
  100      | PRINT SPECIAL_START toprint . SEP EQUAL STRING SPECIAL_END
  101      | PRINT SPECIAL_START toprint . END EQUAL STRING SPECIAL_END

    SPECIAL_END  shift, and go to state 130
    SEP          shift, and go to state 131
    END          shift, and go to state 132


State 110

  102 toprint: X .
  103        | X . COMMA toprint

    COMMA  shift, and go to state 133

    $default  reduce using rule 102 (toprint)


State 111

    5 S: INDENT Simple S .

    $default  reduce using rule 5 (S)


State 112

   39 liststr: Str COMMA liststr .

    $default  reduce using rule 39 (liststr)


State 113

   47 E1: E1 . OP1 E2
   56 E4: SPECIAL_START E1 . SPECIAL_END

    PLUS         shift, and go to state 117
    MINUS        shift, and go to state 118
    SPECIAL_END  shift, and go to state 134

    OP1  go to state 119


State 114

   17 list: ID . EQUAL Arr
   18     | ID . PLUSEQUAL Arr

    EQUAL      shift, and go to state 135
    PLUSEQUAL  shift, and go to state 136


State 115

   19 Arr: SQUAREBRACKET_START list . SQUAREBRACKET_END
   21    | SQUAREBRACKET_START list . SQUAREBRACKET_END mul
   22    | SQUAREBRACKET_START list . SQUAREBRACKET_END add

    SQUAREBRACKET_END  shift, and go to state 137


State 116

   20 Arr: LIST SPECIAL_START . Range SPECIAL_END

    RANGE  shift, and go to state 138

    Range  go to state 139


State 117

   57 OP1: PLUS .

    $default  reduce using rule 57 (OP1)


State 118

   58 OP1: MINUS .

    $default  reduce using rule 58 (OP1)


State 119

   47 E1: E1 OP1 . E2

    ID             shift, and go to state 66
    NUM            shift, and go to state 67
    INTEGER        shift, and go to state 69
    SPECIAL_START  shift, and go to state 70

    E2  go to state 140
    E3  go to state 76
    E4  go to state 77


State 120

   59 OP2: MUL .

    $default  reduce using rule 59 (OP2)


State 121

   60 OP2: DIVIDE .

    $default  reduce using rule 60 (OP2)


State 122

   49 E2: E2 OP2 . E3

    ID             shift, and go to state 66
    NUM            shift, and go to state 67
    INTEGER        shift, and go to state 69
    SPECIAL_START  shift, and go to state 70

    E3  go to state 141
    E4  go to state 77


State 123

   51 E3: E4 EXPONENTIAL . E3

    ID             shift, and go to state 66
    NUM            shift, and go to state 67
    INTEGER        shift, and go to state 69
    SPECIAL_START  shift, and go to state 70

    E3  go to state 142
    E4  go to state 77


State 124

   75 cond3: SPECIAL_START cond SPECIAL_END .

    $default  reduce using rule 75 (cond3)


State 125

   64 if_else: IF condition COLON LB . IND else_1
   65 only_if: IF condition COLON LB . IND

    INDENT  shift, and go to state 143

    IND  go to state 144


State 126

   69 cond: cond opor cond1 .
   71 cond1: cond1 . opand cond2

    AND  shift, and go to state 90

    $default  reduce using rule 69 (cond)

    opand  go to state 91


State 127

   71 cond1: cond1 opand cond2 .

    $default  reduce using rule 71 (cond1)


State 128

   47 E1: E1 . OP1 E2
   78 relexp: relexp relop E1 .

    PLUS   shift, and go to state 117
    MINUS  shift, and go to state 118

    $default  reduce using rule 78 (relexp)

    OP1  go to state 119


State 129

   67 while_loop: WHILE condition COLON LB . IND

    INDENT  shift, and go to state 143

    IND  go to state 145


State 130

   98 Print: PRINT SPECIAL_START toprint SPECIAL_END .

    $default  reduce using rule 98 (Print)


State 131

   99 Print: PRINT SPECIAL_START toprint SEP . EQUAL STRING END EQUAL STRING SPECIAL_END
  100      | PRINT SPECIAL_START toprint SEP . EQUAL STRING SPECIAL_END

    EQUAL  shift, and go to state 146


State 132

  101 Print: PRINT SPECIAL_START toprint END . EQUAL STRING SPECIAL_END

    EQUAL  shift, and go to state 147


State 133

  103 toprint: X COMMA . toprint

    ID                   shift, and go to state 104
    NUM                  shift, and go to state 105
    STRING               shift, and go to state 106
    INTEGER              shift, and go to state 107
    SQUAREBRACKET_START  shift, and go to state 71
    LIST                 shift, and go to state 72

    Arr      go to state 108
    toprint  go to state 148
    X        go to state 110


State 134

   56 E4: SPECIAL_START E1 SPECIAL_END .

    $default  reduce using rule 56 (E4)


State 135

   17 list: ID EQUAL . Arr

    SQUAREBRACKET_START  shift, and go to state 71
    LIST                 shift, and go to state 72

    Arr  go to state 73


State 136

   18 list: ID PLUSEQUAL . Arr

    SQUAREBRACKET_START  shift, and go to state 71
    LIST                 shift, and go to state 72

    Arr  go to state 79


State 137

   19 Arr: SQUAREBRACKET_START list SQUAREBRACKET_END .
   21    | SQUAREBRACKET_START list SQUAREBRACKET_END . mul
   22    | SQUAREBRACKET_START list SQUAREBRACKET_END . add

    PLUS  shift, and go to state 149
    MUL   shift, and go to state 33

    $default  reduce using rule 19 (Arr)

    mul  go to state 150
    add  go to state 151


State 138

   27 Range: RANGE . SPECIAL_START start COMMA stop COMMA step SPECIAL_END
   28      | RANGE . SPECIAL_START COMMA COMMA SPECIAL_END

    SPECIAL_START  shift, and go to state 152


State 139

   20 Arr: LIST SPECIAL_START Range . SPECIAL_END

    SPECIAL_END  shift, and go to state 153


State 140

   47 E1: E1 OP1 E2 .
   49 E2: E2 . OP2 E3

    MUL     shift, and go to state 120
    DIVIDE  shift, and go to state 121

    $default  reduce using rule 47 (E1)

    OP2  go to state 122


State 141

   49 E2: E2 OP2 E3 .

    $default  reduce using rule 49 (E2)


State 142

   51 E3: E4 EXPONENTIAL E3 .

    $default  reduce using rule 51 (E3)


State 143

   96 IND: INDENT . A S

    $default  reduce using rule 97 (A)

    A  go to state 154


State 144

   64 if_else: IF condition COLON LB IND . else_1
   65 only_if: IF condition COLON LB IND .

    ELSE  shift, and go to state 155

    $default  reduce using rule 65 (only_if)

    else_1  go to state 156


State 145

   67 while_loop: WHILE condition COLON LB IND .

    $default  reduce using rule 67 (while_loop)


State 146

   99 Print: PRINT SPECIAL_START toprint SEP EQUAL . STRING END EQUAL STRING SPECIAL_END
  100      | PRINT SPECIAL_START toprint SEP EQUAL . STRING SPECIAL_END

    STRING  shift, and go to state 157


State 147

  101 Print: PRINT SPECIAL_START toprint END EQUAL . STRING SPECIAL_END

    STRING  shift, and go to state 158


State 148

  103 toprint: X COMMA toprint .

    $default  reduce using rule 103 (toprint)


State 149

   24 add: PLUS . INTEGER

    INTEGER  shift, and go to state 159


State 150

   21 Arr: SQUAREBRACKET_START list SQUAREBRACKET_END mul .

    $default  reduce using rule 21 (Arr)


State 151

   22 Arr: SQUAREBRACKET_START list SQUAREBRACKET_END add .

    $default  reduce using rule 22 (Arr)


State 152

   27 Range: RANGE SPECIAL_START . start COMMA stop COMMA step SPECIAL_END
   28      | RANGE SPECIAL_START . COMMA COMMA SPECIAL_END

    NUM      shift, and go to state 160
    INTEGER  shift, and go to state 161
    COMMA    shift, and go to state 162

    start  go to state 163


State 153

   20 Arr: LIST SPECIAL_START Range SPECIAL_END .

    $default  reduce using rule 20 (Arr)


State 154

   96 IND: INDENT A . S

    ID       shift, and go to state 1
    NUM      shift, and go to state 2
    STRING   shift, and go to state 3
    INTEGER  shift, and go to state 4
    IF       shift, and go to state 5
    WHILE    shift, and go to state 6
    PRINT    shift, and go to state 7
    COMMENT  shift, and go to state 8
    INDENT   shift, and go to state 9

    $default  reduce using rule 6 (S)

    S           go to state 164
    Simple      go to state 12
    Assignment  go to state 13
    list        go to state 14
    listnum     go to state 15
    liststr     go to state 16
    Str         go to state 17
    string      go to state 18
    Compound    go to state 19
    if_else     go to state 20
    only_if     go to state 21
    while_loop  go to state 22
    Print       go to state 23
    comment     go to state 24


State 155

   66 else_1: ELSE . COLON LB IND

    COLON  shift, and go to state 165


State 156

   64 if_else: IF condition COLON LB IND else_1 .

    $default  reduce using rule 64 (if_else)


State 157

   99 Print: PRINT SPECIAL_START toprint SEP EQUAL STRING . END EQUAL STRING SPECIAL_END
  100      | PRINT SPECIAL_START toprint SEP EQUAL STRING . SPECIAL_END

    SPECIAL_END  shift, and go to state 166
    END          shift, and go to state 167


State 158

  101 Print: PRINT SPECIAL_START toprint END EQUAL STRING . SPECIAL_END

    SPECIAL_END  shift, and go to state 168


State 159

   24 add: PLUS INTEGER .

    $default  reduce using rule 24 (add)


State 160

   29 start: NUM .

    $default  reduce using rule 29 (start)


State 161

   30 start: INTEGER .

    $default  reduce using rule 30 (start)


State 162

   28 Range: RANGE SPECIAL_START COMMA . COMMA SPECIAL_END

    COMMA  shift, and go to state 169


State 163

   27 Range: RANGE SPECIAL_START start . COMMA stop COMMA step SPECIAL_END

    COMMA  shift, and go to state 170


State 164

   96 IND: INDENT A S .

    $default  reduce using rule 96 (IND)


State 165

   66 else_1: ELSE COLON . LB IND

    NL  shift, and go to state 57

    LB  go to state 171


State 166

  100 Print: PRINT SPECIAL_START toprint SEP EQUAL STRING SPECIAL_END .

    $default  reduce using rule 100 (Print)


State 167

   99 Print: PRINT SPECIAL_START toprint SEP EQUAL STRING END . EQUAL STRING SPECIAL_END

    EQUAL  shift, and go to state 172


State 168

  101 Print: PRINT SPECIAL_START toprint END EQUAL STRING SPECIAL_END .

    $default  reduce using rule 101 (Print)


State 169

   28 Range: RANGE SPECIAL_START COMMA COMMA . SPECIAL_END

    SPECIAL_END  shift, and go to state 173


State 170

   27 Range: RANGE SPECIAL_START start COMMA . stop COMMA step SPECIAL_END

    NUM      shift, and go to state 174
    INTEGER  shift, and go to state 175

    stop  go to state 176


State 171

   66 else_1: ELSE COLON LB . IND

    INDENT  shift, and go to state 143

    IND  go to state 177


State 172

   99 Print: PRINT SPECIAL_START toprint SEP EQUAL STRING END EQUAL . STRING SPECIAL_END

    STRING  shift, and go to state 178


State 173

   28 Range: RANGE SPECIAL_START COMMA COMMA SPECIAL_END .

    $default  reduce using rule 28 (Range)


State 174

   31 stop: NUM .

    $default  reduce using rule 31 (stop)


State 175

   32 stop: INTEGER .

    $default  reduce using rule 32 (stop)


State 176

   27 Range: RANGE SPECIAL_START start COMMA stop . COMMA step SPECIAL_END

    COMMA  shift, and go to state 179


State 177

   66 else_1: ELSE COLON LB IND .

    $default  reduce using rule 66 (else_1)


State 178

   99 Print: PRINT SPECIAL_START toprint SEP EQUAL STRING END EQUAL STRING . SPECIAL_END

    SPECIAL_END  shift, and go to state 180


State 179

   27 Range: RANGE SPECIAL_START start COMMA stop COMMA . step SPECIAL_END

    NUM      shift, and go to state 181
    INTEGER  shift, and go to state 182

    step  go to state 183


State 180

   99 Print: PRINT SPECIAL_START toprint SEP EQUAL STRING END EQUAL STRING SPECIAL_END .

    $default  reduce using rule 99 (Print)


State 181

   33 step: NUM .

    $default  reduce using rule 33 (step)


State 182

   34 step: INTEGER .

    $default  reduce using rule 34 (step)


State 183

   27 Range: RANGE SPECIAL_START start COMMA stop COMMA step . SPECIAL_END

    SPECIAL_END  shift, and go to state 184


State 184

   27 Range: RANGE SPECIAL_START start COMMA stop COMMA step SPECIAL_END .

    $default  reduce using rule 27 (Range)
